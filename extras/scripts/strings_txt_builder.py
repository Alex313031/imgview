"""

strings_XX.txt gets out of date very quickly, especially when coding... it's not easy to keep track of what changes were made which require localization


So, this is to auto-generate strings.txt


This was some basic research, before going all Python

findstr /l /s "CNLS::GetString" *.cpp *.h

exceptions:
GetTooltip in NavigationPanel.cpp

REM search for what you forgot to localize:
findstr /s /l "_T" *.cpp *.h | findstr /v /l "CNLS::GetString"

"""
import re
from pathlib import Path
from datetime import datetime, timezone

SOURCE_DIR = Path(__file__).resolve().parent.parent.parent / r"src\JPEGView"


def find_all_pattern(pattern, file_list=None):
    """ find all strings with some pattern like _T(""), return dict

    file_list past in a list... [one file] works too
    """

    if file_list is None:
        # https://stackoverflow.com/questions/48181073/how-to-glob-two-patterns-with-pathlib/57893015#57893015
        exts = [".h", ".cpp"]
        files = [p for p in Path(SOURCE_DIR).rglob('*') if p.suffix in exts]
    else:
        files = file_list

    #print(list(files))

    list_all = {}

    for f in files:
        # search the file for patterns
        for s in re.findall(pattern, f.read_text()):
            # to figure out what file it came from
            if s in list_all:
                list_all[s].append(f)
            else:
                list_all[s] = [f]


    return list_all


def dump_strings_txt(d):
    OUT_FILE = SOURCE_DIR / "Config" / "strings.txt"

    # dump the dict out

    # UPDATE THE LASTUPDATED if this text gets updated so we know when translations are out of date!
    with open(OUT_FILE, 'wt', encoding='utf-8') as f:
        f.write(f"""// STRINGS.TXT REFERENCE FILE: make a copy, remove this line, and follow the instructions to add/update languages -- Autogenerated, Last Updated: {datetime.now(timezone.utc).isoformat()}

// This file must be encoded with UTF-8 (e.g. with Windows Notepad)
// Filename is: 'strings_%languagecode%.txt' where %languagecode% is the ISO 639 language code e.g. 'fr' for French
// Format is: English string<tab>Translated string<newline>
//
// NOTE: %s %d have special meanings in the strings, so make sure they appear somewhere in the translated string
//
// For the strings which are short and have no context:
//   "in" in context is shorthand for "inch"
//   "cm" in context is shorthand for "centimeter"
//   "C - R" in context is "Cyan Red" colors
//   "M - G" in context is "Magenta Green" colors
//   "Y - B" in context is "Yellow Blue" colors
//   "yes"/"no" in context for showing EXIF flags
//   "on"/"off" in context for showing a setting active or not
//
// = Credits =
// Language: English
// Translator Name(s) / Contact(s):
// Last Updated:
""")
        keys = list(d.keys())
        #keys.sort(key=str.casefold)  # case-insensitive
        keys.sort()  # leave it case sensitive, as the lower case is easy to reference for "in" and "cm"
        for k in keys:
            f.write(f"{k}\t{k}\n")  # sample just has string<tab>string

            # do you want to know what file(s) the string came from?  for debugging only
            #f.write(f"{k}\t{d[k]}\n")



if __name__ == "__main__":
    all_t = find_all_pattern(r'_T\s*\(\s*"(.*?)"\s*\)')

    all_cnls_t = find_all_pattern(r'CNLS::GetString\s*\(\s*_T\s*\(\s*"(.*?)"\s*\)\s*\)')

    # exception in this particular function call
    all_cnls_t.update(find_all_pattern(r'GetTooltip\(\w+,\s*_T\s*\(\s*"(.*?)"\s*\)', [SOURCE_DIR / "NavigationPanel.cpp"]))

    #print(all_cnls_t)
    dump_strings_txt(all_cnls_t)
